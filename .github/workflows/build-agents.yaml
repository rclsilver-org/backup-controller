name: Build Agent Images

on:
  push:
    branches:
      - '**'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  generate-version:
    name: Generate the version
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.value }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Compute the version
        id: version
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "value=${{ github.ref_name }}" >> ${GITHUB_OUTPUT}
          elif [ "${{ github.ref_name }}" == "master" ]; then
            version=$(git describe --tag --match 'v*.*.*' 2>/dev/null || true)

            if [ -z "${version}" ]; then
              version="$(git rev-parse --short HEAD)"
            fi

            echo "value=${version}" >> ${GITHUB_OUTPUT}
          else
            echo "value=snapshot.$(git rev-parse --short HEAD)" >> ${GITHUB_OUTPUT}
          fi

  build-default-agent:
    name: Build Default Agent
    runs-on: ubuntu-latest
    needs:
      - generate-version

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: rclsilver-org/backup-controller-agent-default

    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Determine image tags
        id: tags
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "value=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.version }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> ${GITHUB_OUTPUT}
          else
            echo "value=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}" >> ${GITHUB_OUTPUT}
          fi

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: agents/default
          push: true
          tags: ${{ steps.tags.outputs.value }}
          labels: ${{ steps.meta.outputs.labels }}

  build-postgresql-agent:
    name: Build PostgreSQL Agent
    runs-on: ubuntu-latest
    needs:
      - generate-version
      - build-default-agent

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: rclsilver-org/backup-controller-agent-postgresql

    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Determine image tags
        id: tags
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "value=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.version }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> ${GITHUB_OUTPUT}
          else
            echo "value=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}" >> ${GITHUB_OUTPUT}
          fi

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: agents/postgresql
          build-args: |
            VERSION=${{ needs.generate-version.outputs.version }}
          push: true
          tags: ${{ steps.tags.outputs.value }}
          labels: ${{ steps.meta.outputs.labels }}
